/**
 * generated by Xtext 2.13.0
 */
package org.example.smalljava.validation;

import com.google.inject.Inject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Extension;
import org.example.smalljava.SmallJavaModelUtil;
import org.example.smalljava.smallJava.SJClass;
import org.example.smalljava.smallJava.SmallJavaPackage;
import org.example.smalljava.validation.AbstractSmallJavaValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class SmallJavaValidator extends AbstractSmallJavaValidator {
  protected final static String ISSUE_CODE_PREFIX = "org.example.smalljava.";
  
  public final static String HIERARCHY_CYCLE = (SmallJavaValidator.ISSUE_CODE_PREFIX + "HierarchyCycle");
  
  @Inject
  @Extension
  private SmallJavaModelUtil _smallJavaModelUtil;
  
  @Check
  public void checkClassHierarchy(final SJClass c) {
    boolean _contains = this._smallJavaModelUtil.classHierarchy(c).contains(c);
    if (_contains) {
      String _name = c.getName();
      String _plus = ("cycle in hierarchy of class \'" + _name);
      String _plus_1 = (_plus + "\'");
      this.error(_plus_1, 
        SmallJavaPackage.eINSTANCE.getSJClass_Superclass(), 
        SmallJavaValidator.HIERARCHY_CYCLE, c.getSuperclass().getName());
    }
  }
}
