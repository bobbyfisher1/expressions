/*
 * generated by Xtext 2.13.0
 */
package org.example.smalljava.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.smalljava.SmallJavaModelUtil
import org.example.smalljava.smallJava.SJAssignment
import org.example.smalljava.smallJava.SJIfStatement
import org.example.smalljava.smallJava.SJMemberSelection
import org.example.smalljava.smallJava.SJNew
import org.example.smalljava.smallJava.SJNull
import org.example.smalljava.smallJava.SJProgram
import org.example.smalljava.smallJava.SJReturn
import org.example.smalljava.smallJava.SJStatement
import org.example.smalljava.smallJava.SJSymbolRef
import org.example.smalljava.smallJava.SJThis
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(SmallJavaInjectorProvider)
class SmallJavaParsingTest {
	@Inject extension ParseHelper<SJProgram> parseHelper
	@Inject extension SmallJavaModelUtil

	def private assertAssociativity(SJStatement s, CharSequence expected) {
		expected.toString.assertEquals(s.stringRepr)
	}

	def private String stringRepr(SJStatement s) {
		switch (s) {
			SJAssignment: '''(«s.left.stringRepr» = «s.right.stringRepr»)'''
			SJMemberSelection: '''(«s.receiver.stringRepr».«s.member.name»)'''
			SJThis:
				"this"
			SJNew: '''new «s.type.name»()'''
			SJNull:
				"null"
			SJSymbolRef:
				s.symbol.name
			SJReturn:
				s.expression.stringRepr
		}
	}

	@Test def void testMemberSelectionLeftAssociativity() {
		'''
			class A {
				A m() { return this.m().m(); }
			}
		'''.parse.classes.head.methods.head.body.statements.last.assertAssociativity("((this.m).m)")
	}

	@Test def void testAssignmentRightAssociativity() {
		'''
			class A {
			  A m() {
			    A f = null;
			    A g = null;
			    f = g = null;
			  }
			}
		'''.parse.classes.head.methods.head.body.statements.last.assertAssociativity("(f = (g = null))")
	}

	@Test def void testElse() {
		'''
			class C {
			  C c;
			  C m() {
			    if (true)
			      if (false)
			        this.c = null;
			      else
			        this.c = null;
			    return this.c;
			  }
			}
		'''.parse => [
			val ifS = (classes.head.methods.head.body.statements.head as SJIfStatement)
			ifS.elseBlock.assertNull
		// thus the else is associated to the inner if
		]
	}

	@Test def void testElseWithBlock() {
		'''
			class C {
			  C c;
			  C m() {
			    if (true) {
			      if (false)
			        this.c = null;
			    } else
			        this.c = null;
			    return this.c;
			  }
			}
		'''.parse => [
			val ifS = (classes.head.methods.head.body.statements.head as SJIfStatement)
			ifS.elseBlock.assertNotNull
		// thus the else is associated to the outer if
		]
	}
}
