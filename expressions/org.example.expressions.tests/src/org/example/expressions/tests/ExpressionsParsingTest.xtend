/*
 * generated by Xtext 2.13.0
 */
package org.example.expressions.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.expressions.expressions.And
import org.example.expressions.expressions.BoolConstant
import org.example.expressions.expressions.Comparison
import org.example.expressions.expressions.Equality
import org.example.expressions.expressions.Expression
import org.example.expressions.expressions.ExpressionsModel
import org.example.expressions.expressions.IntConstant
import org.example.expressions.expressions.Minus
import org.example.expressions.expressions.MulOrDiv
import org.example.expressions.expressions.Not
import org.example.expressions.expressions.Or
import org.example.expressions.expressions.Plus
import org.example.expressions.expressions.StringConstant
import org.example.expressions.expressions.VariableRef
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(ExpressionsInjectorProvider)
class ExpressionsParsingTest {

	@Inject extension ParseHelper<ExpressionsModel>

	@Test def void testEvalExpression() {
		"eval 10".parse.assertNotNull
	}

	@Test def void testVariable() {
		"var i = 10".parse.assertNotNull
	}

	@Test def void testEvalBooleanConstant() {
		"eval true".parse.assertNotNull
	}

	@Test def void testEvalStringConstant() {
		'eval "a string"'.parse.assertNotNull
	}

	@Test def void testVariableReference() {

		'''
			var i = 10
			eval i
		'''.parse => [
			(elements.last.expression as VariableRef).variable.assertSame(elements.head)
		]
	}

	def private String stringRepr(Expression e) {
		switch (e) {
			Plus: '''(«e.left.stringRepr» + «e.right.stringRepr»)'''
			Minus: '''(«e.left.stringRepr» - «e.right.stringRepr»)'''
			MulOrDiv: '''(«e.left.stringRepr» «e.op» «e.right.stringRepr»)'''
			Comparison: '''(«e.left.stringRepr» «e.op» «e.right.stringRepr»)'''
			Equality: '''(«e.left.stringRepr» «e.op» «e.right.stringRepr»)'''
			And: '''(«e.left.stringRepr» && «e.right.stringRepr»)'''
			Or: '''(«e.left.stringRepr» || «e.right.stringRepr»)'''
			Not: '''(!«e.expression.stringRepr»)'''
			IntConstant: '''«e.value»'''
			StringConstant: '''«e.value»'''
			BoolConstant: '''«e.value»'''
			VariableRef: '''«e.variable.name»'''
		}.toString
	}

	def private assertRepr(CharSequence input, CharSequence expected) {
		("eval " + input).parse => [expected.assertEquals(elements.last.expression.stringRepr)]
	}

	@Test def void testPlus() {
		"10 + 5 + 1 + 2".assertRepr("(((10 + 5) + 1) + 2)")
	}

	@Test def void testParenthesis() {
		10.assertEquals(("eval (10)".parse.elements.head.expression as IntConstant).value)
	}

	@Test def void testPlusWithParenthesis() {
		"( 10 + 5 ) + ( 1 +2)".assertRepr("((10 + 5) + (1 + 2))")
	}

	@Test def void testMinus() {
		"1-2-3".assertRepr("((1 - 2) - 3)")
	}

	@Test def void testMinusWithParenthesis() {
		"1-(19-4)".assertRepr("(1 - (19 - 4))")
	}

	@Test def void test_minus_and_plus() {
		"1-4+9".assertRepr("((1 - 4) + 9)")
	}

	@Test def void test_m_and_p_with_parenthesis() {
		"1+(5-9)".assertRepr("(1 + (5 - 9))")
	}

	@Test def void test_string() {
		"true + 'treu'".assertRepr("(true + treu)")
	}

	@Test def void testPlusMulPrecedence() {
		"10 + 5 * 2 - 5 / 1".assertRepr("((10 + (5 * 2)) - (5 / 1))")
	}

////This test should pass i. e. be Null	
//	@Test def void missing_right_op(){
//		"eval 58+".parse.assertNull
//	}
	@Test def void test_and() {
		"eval 1 ? 5".parse.assertNotNull
	}

	@Test def void test_precedences() {
		"!true||false&&1>(1/3+5*2)".assertRepr("((!true) || (false && (1 > ((1 / 3) + (5 * 2)))))")
	}

	@Test def void forward_references() {
		'''
			var i = i + 1
		'''.parse.assertNotNull
	}
}
